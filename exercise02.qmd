---
title: "Getting started with R and Python"
date: 2025-09-22
author: "Your name"
format: html
embed-resources: true
---

## Getting started

### Name concepts of a programming language

> Write answer here 

### Check operator precedence

 - Calculate `2 + 6 * 5 ^ 2`
 
```{r}
# Write answer here
```


 - Which operator has the higher priority?

::: unilur-solution
Exponentiation

::: 

 - Change the order of execution giving priority to `+`


```{r}
# Write answer here
```
 

### How to exchange two variables?

There are three ways (in Python) to exchange the values of the names!

```{python}
a = 5
b = 10
```

```{python}
# Write answer here
```

### What is the output of the following code?

```{python}
# Write answer here
```

Explain in your words!

::: unilur-solution
Python parses four expressions, 1 < x and x < 10 and 10 < x + 3 and x + 3 <= 13 [ ] True or [ ] False 
:::


### Missing values

A group of people in the street were asked about their age and answered `18, 20, 34, 53, 12, NA, NA, 72, 75, 13`.


::: {.callout-tip}
### Tip
You can use the function `replace()` to substitute `NA` with `0`.

Consider `is.na()` to identify indeces of missing positions.
:::

 * Compute the average age. 
 
 * Replace NAs with 0. 
 
 * How large is error that you make when ignore missing values?

```{r}
# Write answer here
```


## `mtcars`

You will work with the built-in `mtcars` dataset (R) and a Python equivalent derived from it. The goal is to compare the capabilities of R and Python, highlighting their strengths and differences in data processing.


### Setup

- For R, use the `mtcars` dataset (built-in).
- For Python, use a dictionary-based equivalent of `mtcars`.
- Only use **base R** and **base Python**.

### Notes

- Focus on **readability** and **reproducibility** in your code.
- Provide brief comments explaining your code and comparisons between R and Python.
- Use `#` for comments in both languages to explain your reasoning.
- Highlight differences in syntax, ease of use, and language strengths in your comparisons.

## Python `mtcars` equivalent

Run this R code to represent `mtcars` data frame:
```{r}
head(mtcars, 10)
```

Run this Python code to create a dictionary mimicking `mtcars`:

```{python}
mtcars = {
    'mpg':  [21.0, 21.0, 22.8, 21.4, 18.7, 18.1, 14.3, 24.4, 22.8, 19.2, 17.8,
             16.4, 17.3, 15.2, 10.4, 10.4, 14.7, 32.4, 30.4, 33.9, 21.5, 15.5,
             15.2, 13.3, 19.2, 27.3, 26.0, 30.4, 15.8, 19.7, 15.0, 21.4],
    'cyl':  [6, 6, 4, 6, 8, 6, 8, 4, 4, 6, 6,
             8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 8,
             8, 8, 8, 4, 4, 4, 8, 6, 8, 4],
    'disp': [160.0, 160.0, 108.0, 258.0, 360.0, 225.0, 360.0, 146.7, 140.8, 167.6, 167.6,
             275.8, 275.8, 275.8, 472.0, 460.0, 440.0, 78.7, 75.7, 71.1, 120.1, 318.0,
             304.0, 350.0, 400.0, 79.0, 120.3, 95.1, 351.0, 145.0, 301.0, 121.0],
    'hp':   [110, 110, 93, 110, 175, 105, 245, 62, 95, 123, 123,
             180, 180, 180, 205, 215, 230, 66, 52, 65, 97, 150,
             150, 245, 175, 66, 91, 113, 264, 175, 335, 109],
    'drat': [3.90, 3.90, 3.85, 3.08, 3.15, 2.76, 3.21, 3.69, 3.92, 3.92, 3.92,
             3.07, 3.07, 3.07, 2.93, 3.00, 3.23, 4.08, 4.93, 4.22, 3.70, 2.76,
             3.15, 3.73, 3.08, 4.08, 4.43, 3.77, 4.22, 3.62, 3.54, 4.11],
    'wt':   [2.620, 2.875, 2.320, 3.215, 3.440, 3.460, 3.570, 3.190, 3.150, 3.440, 3.440,
             4.070, 3.730, 3.780, 5.250, 5.424, 5.345, 2.200, 1.615, 1.835, 2.465, 3.520,
             3.435, 3.840, 3.845, 1.935, 2.140, 1.513, 3.170, 2.770, 3.570, 2.780],
    'qsec': [16.46, 17.02, 18.61, 19.44, 17.02, 20.22, 15.84, 20.00, 22.90, 18.30, 18.90,
             17.40, 17.60, 18.00, 17.98, 17.82, 17.42, 19.47, 18.52, 19.90, 20.01, 16.87,
             17.30, 15.41, 17.05, 18.90, 16.70, 16.90, 14.50, 15.50, 14.60, 18.60],
    'vs':   [0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1,
             0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0,
             0, 0, 0, 1, 0, 1, 0, 0, 0, 1],
    'am':   [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
             0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0,
             0, 0, 0, 1, 1, 1, 1, 1, 1, 1],
    'gear': [4, 4, 4, 3, 3, 3, 3, 4, 4, 4, 4,
             3, 3, 3, 3, 3, 3, 4, 4, 4, 3, 3,
             3, 3, 3, 4, 5, 5, 5, 5, 5, 4],
    'carb': [4, 4, 1, 1, 2, 1, 4, 2, 2, 4, 4,
             3, 3, 3, 4, 4, 4, 1, 2, 1, 1, 2,
             2, 4, 2, 1, 2, 2, 4, 6, 8, 2],
    'name': ['Mazda RX4', 'Mazda RX4 Wag', 'Datsun 710', 'Hornet 4 Drive', 'Hornet Sportabout',
             'Valiant', 'Duster 360', 'Merc 240D', 'Merc 230', 'Merc 280', 'Merc 280C',
             'Merc 450SE', 'Merc 450SL', 'Merc 450SLC', 'Cadillac Fleetwood', 'Lincoln Continental',
             'Chrysler Imperial', 'Fiat 128', 'Honda Civic', 'Toyota Corolla', 'Toyota Corona',
             'Dodge Challenger', 'AMC Javelin', 'Camaro Z28', 'Pontiac Firebird', 'Fiat X1-9',
             'Porsche 914-2', 'Lotus Europa', 'Ford Pantera L', 'Ferrari Dino', 'Maserati Bora',
             'Volvo 142E']
}
```


## Tasks

### Task 1: Basic operations

Using `mtcars` (R) and the provided dictionary (Python):

#### **Arithmetic operations**:

- In R, calculate the average `mpg` for cars with `cyl == 6` using **vectorized** operations.
   
```{r}
# Write answer here
```

- In base Python, calculate the same quantity.

```{python}
# Write answer here
```



#### **Comparison and logical operations**:
- In R, count the number of cars where `mpg > 20` and `hp <= 100` using vectorized logical operations.

```{r}
# Write answer here
```

- In Python, perform the same operation.

```{python}
# Write answer here
```



### Task 2: Data types and structures

#### **Type checking and coercion**:
- In R, check the type of `mtcars$mpg` and coerce it to integer.

```{r}
# Write answer here
```

- In Python, check the type of `mtcars['mpg']` and coerce it to a list of integers.

 
```{python}
# Write answer here
```


#### **Subsetting/slicing**:
- In R, subset `mtcars` to select rows where `gear == 4` and columns `mpg`, and `hp`.

```{r}
# Write answer here
```

- In Python, perform the same operation using explicit iteration.

```{python}
# Write answer here
```



### Task 3: Packages and libraries

#### **Loading packages/libraries**:
- In R, load the `tidyverse` package and use `dplyr::filter()` to select cars with `am == 1` (manual transmission).

```{r}
# Write answer here
```

- In Python, import the `statistics` module and calculate the mean `mpg` for cars with `am == 1`.
```{python}
# Write answer here
```



